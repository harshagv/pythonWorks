#!/usr/sbin/nft -f
flush ruleset

# Define named networks (do NOT include /24 here)
define vpn_net = 10.8.0.0
define private_net = 10.0.10.0

table inet filter {
    chain input {
        type filter hook input priority 0;
        policy drop;
        iifname "lo" accept
        ct state {established, related} accept
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept
        tcp dport 22 accept
        udp dport 1194 accept
    }
    chain forward {
        type filter hook forward priority 0;
        policy drop;
        # Replace interface names as needed!
        # enp0s8 = private, enp0s9 = public, tun0 = vpn
        # Allow traffic from VPN to private LAN and its return
        iifname "tun0" oifname "enp0s8" ip saddr $vpn_net/24 ip daddr $private_net/24 ct state {new, established, related} accept
        iifname "enp0s8" oifname "tun0" ip saddr $private_net/24 ip daddr $vpn_net/24 ct state {established, related} accept
        # Allow traffic from VPN to the internet and its return
        iifname "tun0" oifname "enp0s9" ip saddr $vpn_net/24 ct state {new, established, related} accept
        iifname "enp0s9" oifname "tun0" ct state {established, related} accept
    }
    chain output {
        type filter hook output priority 0;
        policy accept;
    }
}

# Table for Network Address Translation (NAT)
table ip nat {
    chain prerouting {
        type nat hook prerouting priority -100;
        # Port forward TCP 8080 from public interface to VM A
        iifname "enp0s9" tcp dport 8080 dnat to 10.0.10.10:80
    }
    chain postrouting {
        type nat hook postrouting priority 100;
        # Masquerade traffic from VPN going to the private LAN
        ip saddr $vpn_net/24 ip daddr $private_net/24 oifname "enp0s8" masquerade
        # Masquerade traffic from VPN going to the internet
        ip saddr $vpn_net/24 oifname "enp0s9" masquerade
    }
}
