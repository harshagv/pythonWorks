#!/usr/sbin/nft -f

# Start with a clean slate
flush ruleset

# The 'inet' family handles both IPv4 and IPv6
table inet filter {
    # Chain for incoming traffic to the Jump Host itself
    chain input {
        type filter hook input priority 0;
        policy drop; # Secure default: drop everything unless explicitly allowed

        # Allow loopback traffic
        iifname "lo" accept

        # Allow established and related connections (essential for return traffic)
        ct state {established, related} accept

        # Allow ICMP (ping)
        ip protocol icmp accept
        ip6 nexthdr icmpv6 accept

        # Allow your essential services
        tcp dport 22 accept      # SSH
        udp dport 1194 accept    # OpenVPN
    }

    # Chain for traffic passing THROUGH the Jump Host (ROUTING/FORWARDING)
    chain forward {
        type filter hook forward priority 0;
        policy drop; # Secure default: drop all forwarded traffic unless allowed

        # *** THE CRITICAL FIX IS HERE ***
        # Allow traffic from the VPN to the private LAN and the internet,
        # and allow the return traffic.
        # Replace interface names as needed!
        # enp0s8 = private, enp0s9 = public, tun0 = vpn
        
        # Allow new and established traffic from VPN to private LAN
        iifname "tun0" oifname "enp0s8" ct state {new, established, related} accept
        
        # Allow established traffic from private LAN back to VPN
        iifname "enp0s8" oifname "tun0" ct state {established, related} accept

        # Allow new and established traffic from VPN to the internet
        iifname "tun0" oifname "enp0s9" ct state {new, established, related} accept
        
        # Allow established traffic from the internet back to the VPN
        iifname "enp0s9" oifname "tun0" ct state {established, related} accept
    }

    # Chain for outgoing traffic from the Jump Host itself
    chain output {
        type filter hook output priority 0;
        policy accept; # Generally safe to allow all outgoing traffic
    }
}

# Table for Network Address Translation (NAT)
table ip nat {
    # Chain for modifying packets before routing decision (for DNAT/port forwarding)
    chain prerouting {
        type nat hook prerouting priority -100;

        # Port forward TCP 8080 from public interface to VM A
        # Replace enp0s9 with your PUBLIC interface name
        iifname "enp0s9" tcp dport 8080 dnat to 10.0.10.10:80
    }

    # Chain for modifying packets after routing decision (for SNAT/Masquerade)
    chain postrouting {
        type nat hook postrouting priority 100;

        # Masquerade traffic from VPN going to the private LAN
        # Replace enp0s8 with your PRIVATE interface name
        ip saddr 10.8.0.0/24 ip daddr 10.0.10.0/24 oifname "enp0s8" masquerade

        # Masquerade traffic from VPN going to the internet
        # Replace enp0s9 with your PUBLIC interface name
        ip saddr 10.8.0.0/24 oifname "enp0s9" masquerade
    }
}